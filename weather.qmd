---
title: "A weather-based forecast"
---



```{r setup}
library(neonstore)
library(neon4cast) # remotes::install_github("eco4cast/neon4cast", dep=TRUE)
library(tidyverse)
library(tsibble)
library(lubridate)
library(fable)
library(glue)
knitr::opts_chunk$set(message=FALSE, eval=FALSE) # eval=FALSE to omit running
```



```{r}
forecast_date <- Sys.Date() - days(35)
```

## Access Target Data

The target data is simply a CSV file.  We convert this to a time-series table,
or `tsibble`, by indicating time is indexed by the `datetime` column, with
unique values for each combination of `variable` and `site_id`.

```{r}
targets <-
  glue("https://data.ecoforecast.org/neon4cast-targets/",
       "{theme}/{theme}-targets.csv.gz", theme="aquatics") |> 
  read_csv(show_col_types = FALSE) 

targets_ts <- targets |> 
  as_tsibble(index = datetime, key = c(variable,site_id))
```


`fable` requires variables be given as independent columns, so we use `pivot_wider()`.
For illustrative purposes, we will filter out observations more recent than "forecast date".
In a production forecast, obviously this is just the current date and we use all available
data, but then we have to wait a few days before we have new observations to score.

```{r}
past <-  targets_ts |> 
  filter(datetime < forecast_date) |>
  pivot_wider(names_from="variable", values_from="observation")
```



## Access weather data

We will use downscaled snapshots of NOAA GEFS forecasts at NEON sites.
Note that historical meteorology goes in the `past` data, while forecasted meteorology is passed in as `new_data` to the `forecast` method.

We can use actual NEON weather measurements or NOAA downscaled forecasts sources for historical, past observations.  Note that using NOAA's historical zero-horizon forecast instead of ground-truth measurements can actually be more accurate calibration if future `new_data` forecasts are also coming from NOAA predictions.  (Alternatively, we can merely use historical average seasonal measurements as our long-term 'forecast').


```{r}
sites <- unique(past$site_id)

# peek at the distinct variable names
#  noaa_stage3() |> distinct(variable) |> collect()
# noaa_stage1()  |> distinct(variable) |> collect()

# average over ensembles.  A little slow
historical <- noaa_stage3() |> 
  filter(site_id %in% sites,
         variable %in% c("air_temperature", "precipitation_flux")) |>
  mutate(date = lubridate::as_date(datetime)) |>
  group_by(site_id, date, variable) |>
  summarise(mean = mean(prediction),
            min = min(prediction),
            max = max(prediction)) |>
  collect()


future <- noaa_stage1() |>
  filter(site_id %in% sites,
         variable %in% c("TMP", "PRECP")) |>
  mutate(date = lubridate::as_date(datetime)) |>
  group_by(site_id, date, variable) |>
  summarise(mean = mean(prediction),
            min = min(prediction),
            max = max(prediction)) |>
  collect()

```



```{r}
historical_w <- historical |>
  pivot_wider(names_from="variable", values_from="prediction") |> 
  mutate(air_temperature = air_temperature - 273)


future_w <- future |> 
   pivot_wider(names_from="variable", values_from="prediction") |>
   rename(air_temperature = TMP,
          precip = )
```






## Compute a forecast

```{r}
null_temperature <- past  |> 
  model(null = TSLM(temperature ~ air_temperature)) |>
  forecast(h = "1 year")

null_oxygen <- past  |>
  model(null = TSLM(oxygen ~ temperature)) |>
  forecast(h = "1 year")
```




## Visualize the forecast

```{r}
first4 <- unique(null_temperature$site_id)[1:4]

null_temperature |> filter(site_id %in% first4)  |> 
  autoplot(past) + ggtitle("temperature")
null_oxygen |> filter(site_id %in% first4)  |> 
  autoplot(past) + ggtitle("oxygen")
```

## EFI Formatting

EFI requires a flat-file format for forecasts that avoids the use of complex list columns.  
To convey uncertainty, forecasts must be expressed either by giving mean and standard deviation (for predictions that are normally distributed) or must express forecasts as an ensemble of replicate draws from forecast distribution.
The helper function `efi_format()` handles this transformation.

```{r}

forecast <- bind_rows(efi_format(null_temperature), 
                      efi_format(null_oxygen)) 
```



```{r}
scores <- neon4cast::score(forecast, targets)

scores |> filter(!is.na(observation))
```




```{r}
forecast_file <- glue::glue("{theme}-{date}-{team}.csv.gz",
                            theme = "aquatics", 
                            date=forecast_date,
                            team = "cb_f1")
write_csv(forecast, forecast_file)
```


```{r}
neon4cast::forecast_output_validator(forecast_file)
```


```{r}
submit(forecast_file)
```


```{r}
unlink(forecast_file)
```
